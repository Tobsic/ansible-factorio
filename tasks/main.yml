---

# tasks file for factorio
# Create the user and group to run the factorio server
- name: "{{ ansible_name_prefix }} Create OS group for factorio"
  group:
    name: "{{ service_group }}"

- name: "{{ ansible_name_prefix }} Create OS user for factorio"
  user:
    name: "{{ service_user }}"
    group: "{{ service_group }}"
    groups: ""
    home: "{{ service_home }}"
    system: yes

# Download the factorio server version if needed
- name: "{{ ansible_name_prefix }} Create directories for downloaded files"
  loop:
    - "{{ server_sources }}"
    - "{{ server_games }}/factorio-{{ server_version }}"
  file:
    path: "{{ item }}"
    state: directory

- name: "{{ ansible_name_prefix }} Download factorio headless server from {{ download_url }}"
  get_url:
    url: "{{ download_url }}"
    dest: "{{ server_sources }}/factorio-{{ server_version }}.tar.gz"
    checksum: "{{ download_checksum }}"
  register: download

- name: "{{ ansible_name_prefix }} Extract Factorio headless server to {{ server_games }}/factorio-{{ server_version }}"
  unarchive:
    src: "{{ server_sources }}/factorio-{{ server_version }}.tar.gz"
    remote_src: yes
    dest: "{{ server_games }}/factorio-{{ server_version }}"
    creates: "{{ server_games }}/factorio-{{ server_version }}/factorio"

- name: "{{ ansible_name_prefix }} Create var dir"
  loop:
    - "{{ service_root }}"
    - "{{ service_root }}/saves"
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ service_user }}"
    group: "{{ service_group }}"

# Create config files
- name: "{{ ansible_name_prefix }} Create config files"
  become: yes
  become_user: "{{ service_user }}"
  template:
    src: templates/config.ini.j2
    dest: "{{ service_root }}/config.ini"

# Create the various settings files
- name: "{{ ansible_name_prefix }} Create config files"
  become: yes
  become_user: "{{ service_user }}"
  loop:
    - content: "{{ default_factorio_server_settings | combine(factorio_server_settings) }}"
      file: "server-settings.json"
    - content: "{{ factorio_server_whitelist }}"
      file: "server-whitelist.json"
    - content: "{{ factorio_map_gen_settings }}"
      file: "map-gen-settings.json"
    - content: "{{ factorio_map_settings }}"
      file: "map-settings.json"
    - content: "{{ factorio_server_banlist }}"
      file: banlist.json
    - content: "{{ factorio_server_adminlist }}"
      file: adminlist.json
  vars:
    content: "{{ item.content }}"
    dest: "{{ service_root }}/{{ item.file }}"
  include: json-file.yml

- include: mods.yml
  notify:
    - Restart factorio service

# Create the save if one doesn't already exist
- name: "{{ ansible_name_prefix }} Create default save file"
  become: yes
  become_user: "{{ service_user }}"
  command:
    cmd: "{{ server_games }}/factorio-{{ server_version }}/factorio/bin/x64/factorio --create {{ factorio_target_save }} --config {{ service_root }}/config.ini"
    chdir: "{{ service_root }}"
    creates: "{{ factorio_target_save }}"

# Create the service
- name: "{{ ansible_name_prefix }} Create service file"
  template:
    src: service-template.service.j2
    dest: "/etc/systemd/system/{{ service_name }}.service"
    mode: "u=rwx,g=r,o=r"
  vars:
    bin: "{{ server_games }}/factorio-{{ server_version }}/factorio/bin/x64/factorio"
    save: "{{ factorio_target_save }}"
    description: "Factorio {{ server_version }} {{ service_name }}"
  notify:
    - Reload factorio server (daemon_reload)
    - Restart factorio service
